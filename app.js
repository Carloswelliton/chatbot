const { useMultiFileAuthState, DisconnectReason } = require("@whiskeysockets/baileys");
const makeWASocket = require("@whiskeysockets/baileys").default;
const P = require("pino");
const QRCode = require("qrcode-terminal");
const {join} = require("path");
const express = require("express");
const app = express();
const port = process.env.PORT || 3000;

let latestQr = null;

app.get("/", (req, res)=> {
  if(!latestQr){
      return res.send('<h2>QR code ainda n√£o gerado. Aguarde... </h2>');
  }
  res.send(`
      <h1>Escaneie o QR code para conectar</h1>
  <img src="https://api.qrserver.com/v1/create-qr-code/?data=${encodeURIComponent(latestQr)}&size=300x300" alt="QR Code" />
  <p>Se n√£o conseguir escanear, atualize a p√°gina.</p>
  `);
});

app.listen(port, () => {
  console.log(`Servidor rodando na porta ${port}`);
});

const sessions = {};
const OPERADOR_NUMERO = process.env.WHATSAPP_NUMBER;
const bloqueados = new Set();

async function safeSendMessage(sock, jid, message){
  try {
      await sock.sendMessage(jid, message);
  } catch (error) {
      console.log(`Erro ao enviar mensagem para ${jid}: ${error.message}`);
  }
}

async function iniciarBot(){
  const botStartTime = Date.now();
  const {state, saveCreds}= await useMultiFileAuthState(join(__dirname,"auth"));
  const sock = makeWASocket({
      auth: state,
      logger: P({level: 'silent'})
  });

  sock.ev.on('creds.update', saveCreds);

  sock.ev.on('connection.update', async (update) => {
      const { connection, lastDisconnect, qr } = update;

      if(qr){
          latestQr = qr;
          console.log("Escaneie este QR code no whatsApp, (link disponivel na rota /)");
      }

      console.log("Conex√£o: ", connection);

      if(connection === "open") console.log("Conectado com sucesso");

      if(connection === "close") {
          const statusCode = lastDisconnect?.error?.output?.loggedOut;
          const deveReconectar = statusCode !== DisconnectReason.loggedOut;
          console.log("Conex√£o perdida", deveReconectar);
          if(deveReconectar) iniciarBot();
      }
  });

  //Conversa iniciada
  sock.ev.on('messages.upsert', async ({messages}) => {
    for(const msg of messages){
      if(msg.messageTimestamp && msg.messageTimestamp*1000 < botStartTime)continue;
      if(!msg.message || msg.key.fromMe)continue;

      const sender = msg.key.remoteJid;
      const textRaw  = msg.message.conversation || msg.message.extendedTextMessage?.text || "";
      const text = textRaw.trim().toLowerCase();

      if(!sessions[sender]){
        sessions[sender] = {
          step: 0,
          name: '',
          serviceCategory: "",
          selectedService: "",
          

        };
        await safeSendMessage(sock, sender, {
          text: `Bem vindo(a) √Ä Veterin√°ria Gold Pet, Como posso te chamar?` 
        });
        continue;
      }

      const s = sessions[sender];

      switch (s.step) {
        case 0:
          s.name = textRaw;
          s.step++;
          await safeSendMessage(sock, sender, {
            text:
              `üòä Muito prazer, ${s.name}! Por favor, digite o n√∫mero da categoria de atendimento que deseja:\n\n` +
              `1Ô∏è‚É£ Servi√ßos para c√£es\n` +
              `2Ô∏è‚É£ Servi√ßos para gatos\n` +
              `3Ô∏è‚É£ Produtos\n` +
              `4Ô∏è‚É£ Agendamento\n` +
              `5Ô∏è‚É£ Falar com um atendente`,
          });
          break;
        case 1:
          const clientMsg = text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "")
          if(["1", "um", "caes", "cachorro", "servicos para caes"].some(palavra => clientMsg.includes(palavra))){
            s.serviceCategory = 'C√£es';
            s.step = 2001; //submenu
            await safeSendMessage(sock, sender, {
              text:
                `üê∂ Servi√ßos para C√£es:\n\n` +
                `1Ô∏è‚É£ Banho completo\n` +
                `2Ô∏è‚É£ Tosa higi√™nica\n` +
                `3Ô∏è‚É£ Tosa est√©tica\n` +
                `4Ô∏è‚É£ Banho terap√™utico\n` +
                `5Ô∏è‚É£ Voltar`
            });
          }
          else if(["2", "dois", "gatos", "gato", "servi√ßos para gatos", "servicos para gatos","servi√ßos para gatos", "servicos para gatos"].some(palavra=>clientMsg.includes(palavra))){
            s.serviceCategory = "Gatos";
            s.step = 2002; // submenu
            await safeSendMessage(sock, sender, {
              text:
                `üê± Servi√ßos para Gatos:\n\n` +
                `1Ô∏è‚É£ Banho completo\n` +
                `2Ô∏è‚É£ Tosa higi√™nica\n` +
                `3Ô∏è‚É£ Tosa est√©tica\n` +
                `4Ô∏è‚É£ Banho terap√™utico\n` +
                `5Ô∏è‚É£ Voltar`,
            });
          }
          else if(["3", "produtos", "produtos"].some(palavra => clientMsg.includes(palavra))){
            s.step = 2003;
            await safeSendMessage(sock, sender, {
              text:
                `üõçÔ∏è Nossos Produtos:\n\n` +
                `1Ô∏è‚É£ Ra√ß√µes\n` +
                `2Ô∏è‚É£ Brinquedos\n` +
                `3Ô∏è‚É£ Medicamentos\n` +
                `4Ô∏è‚É£ Acess√≥rios\n` +
                `5Ô∏è‚É£ Voltar`,
            });
          }
          else if(["4", "quatro", "agendar", "agendamento", "agendamentos"].some(palavra=>clientMsg.includes(palavra))){
            s.step = 2004;
            await safeSendMessage(sock, sender, {
              text: 
              `üìÖ Agendamentos:\n\n` +
              `1Ô∏è‚É£ Consulta veterin√°ria\n` +
              `2Ô∏è‚É£ Banho e tosa\n` +
              `3Ô∏è‚É£ Hospedagem\n` +
              `4Ô∏è‚É£ Adestramento\n` +
              `5Ô∏è‚É£ Voltar`
            });
          }
          else if(["5", "cinco", "falar", "atendente", "falar com atendente", "falar com um atendente"].some(palavra => clientMsg.includes(palavra))){
            await handleHumanattendant(sock, sender, s);
            delete sessions[sender];
          }
          else{
            await safeSendMessage(sock, sender, {
              text: 
              `‚ùå Op√ß√£o inv√°lida, por favor informe uma op√ß√£o v√°lida`
            });
          }
          break;    
        case 2001:
          if(text === "1"){
            s.selectedService = "Banho completo para C√£es";
            await askServiceDetails(sock, sender, s);
          }
          else if (text === "2") {
            s.selectedService = "Tosa higi√™nica para C√£es";
            await askServiceDetails(sock, sender, s);
          } else if (text === "3") {
            s.selectedService = "Tosa est√©tica para C√£es";
            await askServiceDetails(sock, sender, s);
          } else if (text === "4") {
            s.selectedService = "Banho terap√™utico para C√£es";
            await askServiceDetails(sock, sender, s);
          } else if (text === "5") {
            s.step = 1;
            await showMainMenu(sock, sender, s);
          } else {
            await safeSendMessage(sock, sender, {
              text: "‚ùå Op√ß√£o inv√°lida. Por favor, digite um n√∫mero entre 1 e 5.",
            });
          }
          break;
        case 2002:
          if(text === "1"){
            s.selectedService = "Banho completo para Gatos";
            await askServiceDetails(sock, sender, s);
          }
          else if(text === "2"){
            s.selectedService = "Tosa higi√™nica para Gatos";
            await askServiceDetails(sock, sender, s);
          }
          else if(text === "3"){
            s.selectedService = "Tosa est√©tica para Gatos";
            await askServiceDetails(sock, sender, s);
          }
          else if(text === "4"){
            s.selectedService = "Banho terap√™utico para Gatos";
            await askServiceDetails(sock, sender, s);
          }
          else if(text === "5"){
            s.step = 1;
            await showMainMenu(sock, sender, s);
          }
          else{
            await safeSendMessage(sock, sender, {
              text: '‚ùå Op√ß√£o inv√°lida. Por favor, digite um n√∫mero entre 1 e 5.'
            });
          }
          break;
        case 2003:
          //TODO
          break;
        case 2004:
          //TODO
          break;
      }

      async function askServiceDetails(sock, sender, session){
        session.step = 50;
        await safeSendMessage(sock, sender, {
          text: 
          `‚ÑπÔ∏è Voc√™ selecionou: ${session.selectedService}\n\n` +
          `Por favor, informe:\n` +
          `1. Nome do pet\n` +
          `2. Ra√ßa\n` +
          `3. Idade\n` +
          `4. Alguma observa√ß√£o especial\n\n` +
          `Envie tudo em uma √∫nica mensagem, por exemplo:\n` +
          `"Rex, Labrador, 3 anos, tem medo de secador"`
        });
      }

    }
  });






}

iniciarBot();
